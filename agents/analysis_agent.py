# agents/analysis_agent.py
import pandas as pd
from langchain_google_genai import ChatGoogleGenerativeAI
import os

class AnalysisAgent:
    """
    Agent responsible for performing exploratory data analysis and generating insights.
    """
    def __init__(self, data: pd.DataFrame):
        """
        Initialize with input data and an LLM handler.
        
        Args:
            data (pd.DataFrame): Input data for analysis.
        """
        self.data = data
        self.llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash", google_api_key=os.getenv("GOOGLE_API_KEY"), client=None) # Added client=None

    def perform_eda(self):
        """
        Perform exploratory data analysis on the dataset.
        
        Returns:
            dict: Dictionary containing basic statistics and correlations.
        """
        # Basic statistics
        stats = {
            "describe": self.data.describe().to_string(),
            "missing_values": self.data.isnull().sum().to_dict()
        }

        # Correlation matrix (only for numeric columns)
        numeric_data = self.data.select_dtypes(include=['float64', 'int64'])
        correlations = numeric_data.corr().to_string()

        return {"stats": stats, "correlations": correlations}

    def generate_insight(self, eda_results: dict):
        """
        Generate an AI-driven insight from the EDA results.
        
        Args:
            eda_results (dict): Results from perform_eda.
            
        Returns:
            str: Insight generated by the LLM.
        """
        prompt = (
            "Analyze this exploratory data analysis summary and provide a concise insight:\n"
            f"Statistics:\n{eda_results['stats']['describe']}\n"
            f"Missing Values: {eda_results['stats']['missing_values']}\n"
            f"Correlations:\n{eda_results['correlations']}"
        )
        return self.llm.invoke(prompt).content

    def analyze(self):
        """
        Run the full analysis pipeline: EDA + insight generation.
        
        Returns:
            tuple: EDA results and AI-generated insight.
        """
        eda_results = self.perform_eda()
        insight = self.generate_insight(eda_results)
        return eda_results, insight
